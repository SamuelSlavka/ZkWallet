import "hashes/sha256/1024bit.zok" as sha256for1024
import "hashes/sha256/256bitPadded.zok" as sha256for256

import "utils/pack/u32/unpack128.zok" as unpack128
import "utils/pack/u32/pack256.zok" as pack256
import "utils/casts/u32_from_bits.zok" as u32_from_bits
import "utils/casts/u32_to_bits.zok" as u32_to_bits
import "utils/casts/u32_to_field.zok" as u32_to_field
import "utils/casts/field_to_u32.zok" as field_to_u32

def check_exponent(field exponent) -> field:
    u32 res = field_to_u32(exponent)
    // 255 is max header value
    for u32 i in 0..255 do
        field result = (res == 0) ? 0 : 1
        u32 tmp = res % 2
        res = ( (result == 0) && (tmp == 0) ) ? res / 2 : 1
    endfor
    return u32_to_field(res)

def get_target(field preimage) -> field:
    u32 bits = unpack128(preimage)[2]
    bool[32] boolBits = u32_to_bits(bits)

    bool[32] head = [...[false;24],...boolBits[24..32]]
    bool[32] tail = [...[false;8],...boolBits[16..24],...boolBits[8..16],...boolBits[0..8]]
    u32 inthead = u32_from_bits(head)
    field fieldhead = u32_to_field(inthead)
    field inttail = u32_to_field(u32_from_bits(tail))
    return fieldhead

// make two sha256 
def hash_block_header(field[5] preimage) -> (u32[8]):
    // abcde are the whole header 640b split into dour 128 parts to enable unpacking
    u32[4] aPreimage = unpack128(preimage[0])
    u32[4] bPreimage = unpack128(preimage[1])
    u32[4] cPreimage = unpack128(preimage[2])
    u32[4] dPreimage = unpack128(preimage[3])
    u32[4] ePreimage = unpack128(preimage[4])
    
    // combined into 256b fields and add padding
    u32[8] preimage1 = [ ...aPreimage, ...bPreimage ]
    u32[8] preimage2 = [ ...cPreimage, ...dPreimage ]
    u32[8] preimage3 = [ ...ePreimage, 0x80000000,0x00000000,0x00000000,0x00000000 ]

    return preimage3
    //u32[8] dummy = [ 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000280 ]
    
    //u32[8] intermediary = sha256for1024(preimage1, preimage2, preimage3, dummy)
    //u32[8] res = sha256for256(intermediary)
	//return res

def main(field[5] header, field fieldhead) -> field:
    u32[8] hash = hash_block_header(header)
    field target = get_target(header[4])
    field exp = check_exponent(fieldhead)
    return exp